{{>header}}
<style>
    /* 그리드 레이아웃 */
    .grid {
        display: grid;
        width: 85%;
        height: 80%;
        grid-template-columns: repeat(2, 1fr); /* 2열 레이아웃 */
        gap: 15px;
    }

    /* 카드 스타일 */
    .card {
        background-color: #FFFFFF;
        padding: 10px;
        width: 100%;
        height: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card h2 {
        margin-top: 0;
    }

    .card textarea {
        width: 100%;
        height: 100px; /* 기본 높이 */
        resize: none; /* 크기 조정 비활성화 */
        overflow-y: auto; /* 세로 스크롤 활성화 */
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        font-size: 1rem;
    }


    /* 공통 링크 스타일 */
    .card ul {
        list-style: none;
        padding: 0;
    }

    .card a {
        text-decoration: none;
        color: black;
    }

    .card a:hover {
        text-decoration: underline;
    }

    .card.disabled {
        background-color: #9294a5; /* 회색 */
        pointer-events: none; /* 클릭 불가능 */
        opacity: 0.6; /* 불투명도 감소 */
    }

    .add-button {
        background-color: #FB9C1F;
        color: white;
        border: none;
        padding: 5px 10px;
        font-size: 1.2rem;
        cursor: pointer;
    }


    /* 분석 제목 */
    .analyzeTitle {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 85%;
    }
    .analyzeEnd {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        width: 85%;
        margin-top: 10px;
    }

    .content-wrapper {
        display: flex;
        justify-content: space-between; /* 양쪽 끝에 배치 */
        align-items: center;
    }
    .analyzeEnd2 {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        margin-top: 10px;
        width: 90%;
        z-index: 3;
    }

    .btnOne {
        background-color: #576096;
        color: white;
        border: none;
        padding: 5px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Score6', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* 호버 효과 및 애니메이션 */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);
    }
    .btnAll {
        background-color: #F19B2A;
        color: white;
        border: none;
        padding: 5px 20px;
        font-size: 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Score6', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* 호버 효과 및 애니메이션 */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);
    }
    .resultTitle{
        font-family: 'Score5', sans-serif;
    }

    .testCard {
        width: 100%;
        height: 100%;
        max-height: 200px; /* 최대 높이 설정 */
        overflow-y: auto; /* 세로 스크롤 활성화 */
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        font-size: 1rem;
        background-color: #fff; /* 배경색 추가 */
    }
    .question {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .question h3 {
        margin-top: 0;
    }

    .choices {
        margin: 10px 0;
    }

    .choices label {
        display: block;
        margin: 5px 0;
    }

</style>

<div id="back_ground2">
    <div class="analyzeTitle">
        <img src="/images/analyzeTitle.svg" style="height: 50%;display: inline-block; margin-bottom: 15px;"/>

        <select  style="background-color: #FFFEFD;
                        opacity: 0.9;
                        border: 1px solid #ddd;
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                        width: 200px;
                        border-radius: 5px;
                        font-family: 'Score5', sans-serif;">
            {{#students}}
                <option value="{{id}}">{{name}} 학생</option>
            {{/students}}
        </select>

    </div>
    <div class="grid">
        <!-- STT(Speech to Text) -->
        <div class="card">
            <div class="content-wrapper">
                <h2 class="resultTitle">STT(Speech to Text)</h2>
            </div>

            <textarea style="height: 100%" placeholder="음성 텍스트 변환 결과입니다.">{{stt}}</textarea>
        </div>
        <div class="card" id="summaryCard">
            <div class="content-wrapper">
                <h2 class="resultTitle">상담 요약</h2>
                <button class="btnOne" onclick="submitData('summary')">등록</button>
            </div>
            <textarea style="height: 100%" placeholder="요약된 상담 내용입니다.">{{response}}</textarea>
        </div>
    </div>

    <div class="analyzeEnd2">
        <img src="/images/analyzeEnd.svg" />
    </div>
    <div style="width: 100%;height: 3%;background-color:#472A00;margin-bottom: 0">

    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // URLSearchParams를 사용하여 현재 URL의 쿼리 파라미터를 확인
        const urlParams = new URLSearchParams(window.location.search);

        // refreshed 파라미터가 없다면 (즉, 외부에서 새로 들어온 경우)
        if (!urlParams.has("refreshed")) {
            setTimeout(() => {
                console.log("5초 후 새로고침 실행");
                // refreshed 파라미터를 추가한 새 URL을 구성
                urlParams.set("refreshed", "true");
                // 새 URL로 이동 (자동 새로고침)
                window.location.search = urlParams.toString();
            }, 100);
        } else {
            console.log("refreshed 파라미터 존재 - 자동 새로고침 미실행");
        }
    });

    let summaryId = null;
    let noticeId = null;
    let testId = null;

    document.addEventListener("DOMContentLoaded", function () {
        const answers = document.querySelectorAll(".correct-answer");
        answers.forEach(answer => {
            const value = parseInt(answer.getAttribute("data-answer"), 10) + 1;
            answer.textContent = value;
        });
    });

    function submitData(type) {
     let formData = new FormData();

     const content = document.querySelector('.grid .card textarea[placeholder="요약된 상담 내용입니다."]').value;
     const id = document.querySelector('select').value;
     formData.append('content', content);
     formData.append('id', id);

     sendRequest( formData);

    }

    function sendRequest( formData) {
        const confirmed = confirm('상담 요약을 등록하시겠습니까?');
        if (confirmed) {
            fetch(`/counsel/save`, {
                method: 'POST',
                body: formData
            })
                    .then(response => response.text()) // JSON 대신 text() 사용
                    .then(data => {
                        alert('상담 요약이 성공적으로 등록되었습니다!');
                        window.location.href = "/teacher";


                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('오류가 발생했습니다. 다시 시도해주세요.');
                    });
        }
    }

</script>
{{>footer}}
