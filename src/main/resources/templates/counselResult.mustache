{{>header}}

<link rel="stylesheet" href="/css/CounselResult.css">
<div id="back_ground2">
    <div class="analyzeTitle">
        <img src="/images/analyzeTitle.svg" style="height: 50%;display: inline-block; margin-bottom: 15px;"/>

        <select  style="background-color: #FFFEFD;
                        opacity: 0.9;
                        border: 1px solid #ddd;
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                        width: 200px;
                        border-radius: 5px;
                        font-family: 'Score5', sans-serif;">
            {{#students}}
                <option value="{{id}}">{{name}} 학생</option>
            {{/students}}
        </select>

    </div>
    <div class="grid">
        <!-- STT(Speech to Text) -->
        <div class="card">
            <div class="content-wrapper">
                <h2 class="resultTitle">STT(Speech to Text)</h2>
            </div>

            <textarea style="height: 100%" placeholder="음성 텍스트 변환 결과입니다.">{{stt}}</textarea>
        </div>
        <div class="card" id="summaryCard">
            <div class="content-wrapper">
                <h2 class="resultTitle">상담 요약</h2>
                <button class="btnOne" onclick="submitData('summary')">등록</button>
            </div>
            <textarea style="height: 100%" placeholder="요약된 상담 내용입니다.">{{response}}</textarea>
        </div>
    </div>

    <div class="analyzeEnd2">
        <img src="/images/analyzeEnd.svg" />
    </div>
    <div style="width: 100%;height: 3%;background-color:#472A00;margin-bottom: 0">

    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // URLSearchParams를 사용하여 현재 URL의 쿼리 파라미터를 확인
        const urlParams = new URLSearchParams(window.location.search);

        // refreshed 파라미터가 없다면 (즉, 외부에서 새로 들어온 경우)
        if (!urlParams.has("refreshed")) {
            setTimeout(() => {
                console.log("5초 후 새로고침 실행");
                // refreshed 파라미터를 추가한 새 URL을 구성
                urlParams.set("refreshed", "true");
                // 새 URL로 이동 (자동 새로고침)
                window.location.search = urlParams.toString();
            }, 100);
        } else {
            console.log("refreshed 파라미터 존재 - 자동 새로고침 미실행");
        }
    });

    let summaryId = null;
    let noticeId = null;
    let testId = null;

    document.addEventListener("DOMContentLoaded", function () {
        const answers = document.querySelectorAll(".correct-answer");
        answers.forEach(answer => {
            const value = parseInt(answer.getAttribute("data-answer"), 10) + 1;
            answer.textContent = value;
        });
    });

    function submitData(type) {
     let formData = new FormData();

     const content = document.querySelector('.grid .card textarea[placeholder="요약된 상담 내용입니다."]').value;
     const id = document.querySelector('select').value;
     formData.append('content', content);
     formData.append('id', id);

     sendRequest( formData);

    }

    function sendRequest( formData) {
        const confirmed = confirm('상담 요약을 등록하시겠습니까?');
        if (confirmed) {
            fetch(`/counsel/save`, {
                method: 'POST',
                body: formData
            })
                    .then(response => response.text()) // JSON 대신 text() 사용
                    .then(data => {
                        alert('상담 요약이 성공적으로 등록되었습니다!');
                        window.location.href = "/teacher";


                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('오류가 발생했습니다. 다시 시도해주세요.');
                    });
        }
    }

</script>
{{>footer}}
