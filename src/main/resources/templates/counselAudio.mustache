{{>header}}
<style>
    /*#startBtn {*/
    /*    width: 50px;*/
    /*    height: 50px;*/
    /*    border: none;*/
    /*    background: url('/images/recording_start.jpg') no-repeat center;*/
    /*    background-size: contain;*/
    /*    cursor: pointer;*/
    /*}*/

    /*#stopBtn {*/
    /*    width: 50px;*/
    /*    height: 50px;*/
    /*    border: none;*/
    /*    background: url('/images/unable_stop.png') no-repeat center;*/
    /*    background-size: contain;*/
    /*    cursor: pointer;*/
    /*}*/
</style>
<div id="back_ground">
    <form id="audio_input" class="container" action="/counsel/upload" method="post" enctype="multipart/form-data"
          style="background-color: white; padding: 30px; width: 50%; border-bottom-left-radius: 8px; border-radius: 8px; height: 60%; position: relative; overflow-y: auto; box-sizing: border-box; margin: 0; flex-direction: column; justify-content: flex-start;">
        <div class="mb-3">
            <label class="form-label" style="font-weight: bold;">음성 파일</label>
            <label class="form-label" for="audioFile" id="audioFileLabel" style="display:none;">녹음 완료</label>
            <input id="audioFile" type="file" class="form-control" name="file" accept="audio/*" style="display:block;">
        </div>
        <div class="mb-3" style="height: 10%">
            <button id="startBtn" type="button">녹음</button>
            <button id="stopBtn" type="button" disabled>중지</button>
        </div>
        <div id="audioPlayerContainer" style="display:none;">
            <audio id="audioPlayer" controls></audio>
        </div>
        <div style="margin-top: 48px; padding-top: 10px;">
            <div id="estimatedTime" style="margin-top: 10px; color: red; font-size: 1em; display: none;">
                예상 소요 시간: <span id="timeRange"></span>
            </div>
            <button id="submit2" type="submit" class="btn btn-primary"
                    style="width: 100%; padding: 10px;">분석 시작</button>
        </div>
    </form>
</div>


<script>
    let mediaRecorder;
    let audioChunks = [];
    const audioForm = document.getElementById("audio_input");
    const startBtn = document.getElementById("startBtn");
    const stopBtn = document.getElementById("stopBtn");
    const audioFileInput = document.getElementById("audioFile");
    const audioFileLabel = document.getElementById("audioFileLabel");
    const audioPlayer = document.getElementById("audioPlayer");
    const audioPlayerContainer = document.getElementById("audioPlayerContainer");

    startBtn.addEventListener("click", async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            console.log("Microphone access successful");
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) audioChunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                console.log("Recording stopped");
                if (audioChunks.length > 0) {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    console.log("Audio Blob created:", audioBlob.size);

                    // WAV로 변환
                    const wavBlob = await convertToWav(audioBlob);
                    console.log("WAV Blob created:", wavBlob.size);

                    // File 객체 생성
                    const wavFile = new File([wavBlob], "recording.wav", { type: "audio/wav" });
                    console.log("WAV File created:", wavFile.size);

                    // 파일을 FormData에 추가
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(wavFile);
                    audioFileInput.files = dataTransfer.files;

                    audioFileLabel.style.display = "block";

                    // 녹음된 내용을 재생
                    const wavURL = URL.createObjectURL(wavBlob);
                    audioPlayer.src = wavURL;
                    audioPlayerContainer.style.display = "block";

                    startBtn.disabled = false;
                    stopBtn.disabled = true;

                    audioChunks = [];
                } else {
                    console.error("No audio data recorded");
                }
            };

            mediaRecorder.start();
            startBtn.disabled = true;
            stopBtn.disabled = false;
            audioPlayerContainer.style.display = "none";
        } catch (error) {
            console.error("Error initializing recording:", error);
        }
    });

    stopBtn.addEventListener("click", () => {
        if (mediaRecorder && mediaRecorder.state !== "inactive") {
            mediaRecorder.stop();
            startBtn.disabled = false;
            stopBtn.disabled = true;
        }
    });

    async function convertToWav(audioBlob) {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const arrayBuffer = await audioBlob.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

        const numberOfChannels = audioBuffer.numberOfChannels;
        const length = audioBuffer.length * numberOfChannels;
        const sampleRate = audioBuffer.sampleRate;
        const buffer = audioContext.createBuffer(numberOfChannels, length, sampleRate);

        for (let channel = 0; channel < numberOfChannels; channel++) {
            buffer.copyToChannel(audioBuffer.getChannelData(channel), channel);
        }

        const wavBuffer = encodeWAV(buffer.getChannelData(0), sampleRate);
        return new Blob([wavBuffer], { type: 'audio/wav' });
    }

    function encodeWAV(samples, sampleRate) {
        const buffer = new ArrayBuffer(44 + samples.length * 2);
        const view = new DataView(buffer);

        writeString(view, 0, 'RIFF');
        view.setUint32(4, 36 + samples.length * 2, true);
        writeString(view, 8, 'WAVE');
        writeString(view, 12, 'fmt ');
        view.setUint32(16, 16, true);
        view.setUint16(20, 1, true);
        view.setUint16(22, 1, true);
        view.setUint32(24, sampleRate, true);
        view.setUint32(28, sampleRate * 2, true);
        view.setUint16(32, 2, true);
        view.setUint16(34, 16, true);
        writeString(view, 36, 'data');
        view.setUint32(40, samples.length * 2, true);

        floatTo16BitPCM(view, 44, samples);

        return buffer;
    }

    function writeString(view, offset, string) {
        for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }

    function floatTo16BitPCM(output, offset, input) {
        for (let i = 0; i < input.length; i++, offset += 2) {
            const s = Math.max(-1, Math.min(1, input[i]));
            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
    }

    const timeRangeDisplay = document.getElementById("timeRange");
    const estimatedTimeContainer = document.getElementById("estimatedTime");
    const baseFileSizes = [747250914, 51692284]; // 파일 크기 (바이트 단위)
    const baseTimes = [136, 23]; // 처리 시간 (초 단위, 2분16초 = 136초)

    // 파일 크기에 따른 소요 시간 계산 함수
    function calculateTime(fileSize) {
        // 파일 크기와 시간 데이터를 기반으로 선형 보간법 사용
        const timePerByte = (baseTimes[0] - baseTimes[1]) / (baseFileSizes[0] - baseFileSizes[1]);
        const baseTime = baseTimes[1] - timePerByte * baseFileSizes[1];
        const estimatedTime = Math.ceil(baseTime + timePerByte * fileSize); // 초 단위 예측

        const estimatedMinutes = Math.floor(estimatedTime / 60); // 분
        const estimatedSeconds = estimatedTime % 60; // 초
        const upperBoundMinutes = estimatedMinutes + 2; // x+2 분

        return { estimatedMinutes, estimatedSeconds, upperBoundMinutes };
    }

    // 파일 선택 시 이벤트 리스너
    audioFileInput.addEventListener("change", (event) => {
        const file = event.target.files[0];
        if (file) {
            const fileSize = file.size; // 파일 크기 (바이트 단위)
            const { estimatedMinutes, estimatedSeconds, upperBoundMinutes } = calculateTime(fileSize);

            timeRangeDisplay.textContent = `${estimatedMinutes}분 ${estimatedSeconds}초 ~ ${upperBoundMinutes}분`;
            estimatedTimeContainer.style.display = "block";
        } else {
            estimatedTimeContainer.style.display = "none";
        }
    });

</script>

{{>footer}}