{{>header}}
<style>
    /* 그리드 레이아웃 */
    .grid {
        display: grid;
        width: 85%;
        height: 80%;
        grid-template-columns: repeat(2, 1fr); /* 2열 레이아웃 */
        gap: 15px;
    }

    /* 카드 스타일 */
    .card {
        background-color: #FFFFFF;
        padding: 10px;
        width: 100%;
        height: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card h2 {
        margin-top: 0;
    }

    .card textarea {
        width: 100%;
        height: 100px; /* 기본 높이 */
        resize: none; /* 크기 조정 비활성화 */
        overflow-y: auto; /* 세로 스크롤 활성화 */
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        font-size: 1rem;
    }


    /* 공통 링크 스타일 */
    .card ul {
        list-style: none;
        padding: 0;
    }

    .card a {
        text-decoration: none;
        color: black;
    }

    .card a:hover {
        text-decoration: underline;
    }

    .card.disabled {
        background-color: #9294a5; /* 회색 */
        pointer-events: none; /* 클릭 불가능 */
        opacity: 0.6; /* 불투명도 감소 */
    }

    .add-button {
        background-color: #FB9C1F;
        color: white;
        border: none;
        padding: 5px 10px;
        font-size: 1.2rem;
        cursor: pointer;
    }


    /* 분석 제목 */
    .analyzeTitle {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 85%;
    }
    .analyzeEnd {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        width: 85%;
        margin-top: 10px;
    }

    .content-wrapper {
        display: flex;
        justify-content: space-between; /* 양쪽 끝에 배치 */
        align-items: center;
    }
    .analyzeEnd2 {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        margin-top: 10px;
        width: 90%;
        z-index: 3;
    }

    .btnOne {
        background-color: #576096;
        color: white;
        border: none;
        padding: 5px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Score6', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* 호버 효과 및 애니메이션 */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);
    }
    .btnAll {
        background-color: #F19B2A;
        color: white;
        border: none;
        padding: 5px 20px;
        font-size: 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Score6', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* 호버 효과 및 애니메이션 */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);
    }
    .resultTitle{
        font-family: 'Score5', sans-serif;
    }

    .testCard {
        width: 100%;
        height: 100%;
        max-height: 200px; /* 최대 높이 설정 */
        overflow-y: auto; /* 세로 스크롤 활성화 */
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        font-size: 1rem;
        background-color: #fff; /* 배경색 추가 */
    }
    .question {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .question h3 {
        margin-top: 0;
    }

    .choices {
        margin: 10px 0;
    }

    .choices label {
        display: block;
        margin: 5px 0;
    }

</style>

<div id="back_ground2">
    <div class="analyzeTitle">
        <img src="/images/analyzeTitle.svg" style="height: 50%;display: inline-block; margin-bottom: 15px;"/>

        <select  style="background-color: #FFFEFD;
                        opacity: 0.9;
                        border: 1px solid #ddd;
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                        width: 200px;
                        border-radius: 5px;
                        font-family: 'Score5', sans-serif;">
            {{#subject}}
                <option value="{{id}}">{{subject}} | {{grade}}학년 {{divClass}}분반</option>
            {{/subject}}
        </select>
    </div>
    <div class="grid">
        <!-- STT(Speech to Text) -->
        <div class="card">
            <div class="content-wrapper">
                <h2 class="resultTitle">STT(Speech to Text)</h2>
            </div>

            <textarea style="height: 100%" placeholder="음성 텍스트 변환 결과입니다.">{{stt}}</textarea>
        </div>
        {{#response}}
            <div class="card" id = "noticeCard">
                <div class="content-wrapper">
                    <h2 class="resultTitle">공지사항</h2>
                    <button class="btnOne" onclick="submitData('notice',true)">등록</button>
                </div>
                {{#notice}}
                <textarea style="height: 100%" placeholder="공지사항 내역입니다.">{{text}}</textarea>
                {{/notice}}
                <input id="file" type="file" class="form-control" name="file">
            </div>

            <div class="card" id="summaryCard">
                <div class="content-wrapper">
                    <h2 class="resultTitle">수업 요약</h2>
                    <button class="btnOne" onclick="submitData('summary',true)">등록</button>
                </div>
                {{#class_summary}}
                <textarea style="height: 100%" placeholder="요약된 수업 내용입니다.">{{text}}</textarea>
                {{/class_summary}}
            </div>

            <div class="card" id="testCard">
                <div class="content-wrapper">
                    <h2 class="resultTitle">시험</h2>
                    <input type="hidden" id="explain" value='{{explains}}'>
                    <button class="btnOne" onclick="submitData('test', true)">등록</button>
                </div>
                {{#quiz}}
                    <div class="testCard" style="height: 100%">
                    {{#text}}
                        {{#questions}}
                            <div class="question">
                                <p style="font-weight: bold">문제: {{question}}</p>
                                <div class="choices">
                                    {{#choices}}
                                        <label>
                                            <input type="radio" name="answer_{{question}}" value="{{.}}" />
                                            {{.}}
                                        </label>
                                    {{/choices}}
                                </div>
                                <p>정답: <span class="correct-answer" data-answer="{{correct_answer}}"></span></p>
                                <div> 해설 : {{explanation}}</div>
                            </div>
                        {{/questions}}
                    {{/text}}
                    </div>

                {{/quiz}}
            </div>
        {{/response}}
    </div>
    <form id="nextForm" action="/board/next" method="POST">
        <input type="hidden" name="classId" id="classId" />
        <input type="hidden" name="notice" id="noticeStatus" />
        <input type="hidden" name="summary" id="summaryStatus" />
        <input type="hidden" name="test" id="testStatus" />
        <input type="hidden" id="summaryId" name="summaryId">
        <input type="hidden" id="testId" name="testId">
        <input type="hidden" id="noticeId" name="noticeId">
    </form>
    <div class="analyzeEnd">
        <button class="btnAll" onclick="clickAll()">한 번에 등록</button>
        <button class="btnAll" onclick="proceedNext()" style="margin-left: 15px">다음으로</button>
    </div>

    <div class="analyzeEnd2">
        <img src="/images/analyzeEnd.svg" />
    </div>
    <div style="width: 100%;height: 3%;background-color:#472A00;margin-bottom: 0">

    </div>
</div>
<script>
    let summaryId = null;
    let noticeId = null;
    let testId = null;

    document.addEventListener("DOMContentLoaded", function () {
        const answers = document.querySelectorAll(".correct-answer");
        answers.forEach(answer => {
            const value = parseInt(answer.getAttribute("data-answer"), 10) + 1;
            answer.textContent = value;
        });
    });

    function submitData(type, showAlert) {
        if (type === 'test') {
            submitTest(true);
        } else {
            let formData = new FormData();

            if (type === 'notice') {
                const content = document.querySelector('.grid .card textarea[placeholder="공지사항 내역입니다."]').value;
                const subjectId = document.querySelector('select').value;
                const fileInput = document.querySelector('#noticeCard input[type="file"]');
                const files = fileInput.files;

                formData.append('content', content);
                formData.append('subjectId', subjectId);

                if (files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        formData.append('files', files[i]);
                    }
                }
            } else if (type === 'summary') {
                const content = document.querySelector('.grid .card textarea[placeholder="요약된 수업 내용입니다."]').value;
                const subjectId = document.querySelector('select').value;
                formData.append('content', content);
                formData.append('subjectId', subjectId);
            }

            sendRequest(type, formData, showAlert);
        }
    }

    function submitTest(showAlert) {
        return new Promise((resolve, reject) => {
            const subjectId = document.querySelector('select').value;
            let questions = [];
            document.querySelectorAll('.testCard .question').forEach(questionElem => {
                let questionText = questionElem.querySelector('p').innerText.replace('문제: ', '');
                let choices = [];
                questionElem.querySelectorAll('input[type="radio"]').forEach(inputElem => {
                    choices.push(inputElem.value);
                });
                let answer = questionElem.querySelector('span').innerText.replace('정답: ', '');
                let explanation = questionElem.querySelector('.correct-answer').dataset.answer;

                questions.push({
                    question: questionText,
                    choices: choices,
                    answer: answer,
                    explanation: explanation
                });
            });

            const testData = {
                subjectId: subjectId,
                questions: questions,
                explains: document.getElementById('explain').value
            };

            if (showAlert && !confirm('시험을 등록하시겠습니까?')) {
                return resolve(); // 취소하면 실행 중단
            }

            fetch('/board/test', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(testData)
            })
                    .then(response => response.json())
                    .then(data => {
                        testId = data; // 시험 ID 저장
                        document.getElementById('testCard').classList.add('disabled');

                        if (showAlert) {
                            alert("시험이 성공적으로 등록되었습니다!");
                        }
                        resolve();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        if (showAlert) {
                            alert('오류가 발생했습니다. 다시 시도해주세요.');
                        }
                        reject(error);
                    });
        });
    }

    function sendRequest(type, formData, showAlert) {
        return new Promise((resolve, reject) => {
            if (showAlert && !confirm(`${type === 'notice' ? '공지사항' : '수업 요약'}을 등록하시겠습니까?`)) {
                return resolve(); // 취소하면 실행 중단
            }

            fetch(`/board/${type}`, {
                method: 'POST',
                body: formData
            })
                    .then(response => response.json())
                    .then(data => {
                        if (type === 'summary') summaryId = data;
                        if (type === 'notice') noticeId = data;

                        document.getElementById(`${type}Card`).classList.add('disabled');

                        if (showAlert) {
                            alert(`${type === 'notice' ? '공지사항' : '수업 요약'}이 성공적으로 등록되었습니다!`);
                        }
                        resolve();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        if (showAlert) {
                            alert('오류가 발생했습니다. 다시 시도해주세요.');
                        }
                        reject(error);
                    });
        });
    }


    function clickAll() {
        const confirmed = confirm("게시물을 한 번에 등록하시겠습니까?");
        if (!confirmed) return;

        if (!document.getElementById('noticeCard').classList.contains('disabled')) {
            submitData('notice', false);
        }
        if (!document.getElementById('summaryCard').classList.contains('disabled')) {
            submitData('summary', false);
        }
        if (!document.getElementById('testCard').classList.contains('disabled')) {
            submitTest(false);
        }
    }
    function proceedNext() {
        // 폼 요소 참조
        const form = document.getElementById("nextForm");
        const classIdInput = document.getElementById("classId");
        const noticeStatusInput = document.getElementById("noticeStatus");
        const summaryStatusInput = document.getElementById("summaryStatus");
        const testStatusInput = document.getElementById("testStatus");

        // 투명 div 내부의 input 요소 참조
        const summaryIdInput = document.getElementById("summaryId");
        const testIdInput = document.getElementById("testId");
        const noticeIdInput = document.getElementById("noticeId");

        // 현재 선택된 클래스 ID 설정
        classIdInput.value = document.querySelector("select").value;

        // 카드 상태 확인
        const disabledCards = Array.from(document.querySelectorAll('.card.disabled h2.resultTitle'))
                .map(card => card.textContent.trim());

        // 상태 값 업데이트
        noticeStatusInput.value = disabledCards.includes("공지사항") ? "true" : "false";
        summaryStatusInput.value = disabledCards.includes("수업 요약") ? "true" : "false";
        testStatusInput.value = disabledCards.includes("시험") ? "true" : "false";

        summaryIdInput.value = summaryId || ""; // summaryId가 없으면 빈 값
        testIdInput.value = testId || "";       // testId가 없으면 빈 값
        noticeIdInput.value = noticeId || "";   // noticeId가 없으면 빈 값

        // 폼 제출
        form.submit();
    }

</script>
{{>footer}}
