{{>header}}

<!-- jQuery 라이브러리 추가 (최신 버전 사용 가능) -->

<link rel="stylesheet" href="/css/student_recode_detail.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<div class="ai-020">
    <div class="left-box" >
        <button class="teacher-button" type="button" >
            <a target="_self" id="btlogin" class="btlogin"  href="/teacher">교사페이지</a>
        </button>
        <a target="_self" id="back-btn" class="back-btn"  href="/teacher/student_recode"><<< 뒤로가기</a>


        <div class="side-box" id="side-box" disable>
            {{#record}}
                <button type="button" class="show_recode" id="show-btn" >생활기록부</button>
            {{/record}}

            {{#counsels}}
                <button type="button" class="show_counsels" id="show-btn" >{{title}}</button>
                <input type="hidden" value="{{id}}">
            {{/counsels}}
        </div>


    </div>

    {{#student }}
        <div class="main-box" >
            <img id="profile_Image" class="blank_profile" src="{{img_path}}"
                 onerror="this.src='/blank_profile/blank_profile.svg';" />
            <div class="name">{{name}} | 학생</div>
        </div>
        <div id="student-info" data-student-id="{{id}}"></div>
    {{/student}}


    <div class="m-box">

        <div class="recode_name" id="recode_name">생활기록부 요약</div>
        <div class="recode_name1" id="recode_name1">직업 추천</div>
        <div class="recode_name2">직업 정보</div>
        <div class="recode_name3">상담 요약</div>
    </div>


    <div class="file_drag" id="file_drag">
        <div id="plz_drag" class="plz_drag">파일을 끌어 올리고 제출하면 AI가 자동으로 학생 정보를 분석후 업로드 합니다.</div>
        <div class="file_list_header" style="display: none;">
            <div class="file_list_header_task">
                <button type="button" id="removeAll_button"><span class="blind">X</span></button>
            </div>
            <div class="file_list_header_title"><span class="text">파일명</span></div>
            <div class="file_list_header_volume"><span class="text">총용량 </span><span id="fileSize">0</span></div>


            <ul id="fileList"></ul>

        </div>

        <div class="file-div">
            <input type="file" id="fileInput" style="display: none;">
            <button class="file-select-1" id="uploadButton1">생활기록부 등록</button>
            <button class="send" id="send">분석하기</button>
        </div>
    </div>

    <div class="counsel_div" id="counsel_div">
        <div class="show_counsel" id="show_counsel1"  style="white-space: pre-wrap;">
            <span class="custom_font">생활기록부 요약</span>
            <div class="show_counsel1_sub" id="show_counsel1_sub"></div>

        </div>


        <div class="show_counsel2" id="show_counsel2"  style="white-space: pre-wrap;">
            <span class="custom_font">추천 직업</span>
            <div class="show_counsel2_sub" id="show_counsel2_sub"></div>
        </div>

        <div class="show_counsel3" id="show_counsel3"  style="white-space: pre-wrap;">
            <span class="custom_font">직업 정보</span>
            <div class="show_counsel3_sub" id="show_counsel3_sub"></div>
        </div>

        <div class="show_counsel4" id="show_counsel4"  style="white-space: pre-wrap;">
            <span class="custom_font">상담 요약</span>
            <div class="show_counsel4_sub" id="show_counsel4_sub"></div>
        </div>

</div>




    <button  id="file_drag_button" class="file" onclick="toggleDiv('file_drag')">생활기록부 등록</button>
    <button  id="show_counsel_button" class="show" onclick="toggleDiv('counsel_div')">상담 내역</button>


</div>


</div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {

        document.querySelectorAll(".show_counsels").forEach(button => {
            button.addEventListener("click", function () {
                const counselId = this.nextElementSibling.value;


                const xhr = new XMLHttpRequest();
                xhr.open("GET", `/api/counsel/${counselId}`, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                            const data = JSON.parse(xhr.responseText);

                            const content = data.content;
                            const answer = data.answer;

                            document.querySelector("#show_counsel1_sub").innerHTML = "";

                            document.querySelector("#show_counsel2_sub").textContent = "";
                            document.querySelector("#show_counsel3_sub").innerHTML = "";

                            // HTML 업데이트
                            document.querySelector("#show_counsel1_sub").innerHTML = answer[0];
                            document.querySelector("#show_counsel2_sub").innerHTML = answer[1];
                            document.querySelector("#show_counsel3_sub").innerHTML = answer[2];
                            document.querySelector("#show_counsel4_sub").innerHTML = content; // 예시로 'content'를 사용
                            // div 보이기
                            document.querySelector("#show_counsel1_sub").style.display = 'block';
                            document.querySelector("#show_counsel2_sub").style.display = 'block';
                            document.querySelector("#show_counsel3_sub").style.display = 'block';

                            // show_counsel4 div 보이기
                            document.querySelector("#show_counsel4_sub").style.display = 'block';
                        } else {
                            alert("상담 데이터를 불러오는데 실패했습니다.");
                        }
                    }
                };
                xhr.send();
            });



        });

        var fileName = "{{#student}}{{img_path}}{{/student}}";

        fetch("/signed-url?fileName=" + encodeURIComponent(fileName))   //특수문자 같은거 인코딩
                .then(response => response.text())
                .then(url => {
                    document.getElementById("profile_Image").src = url;
                })
                .catch(error => console.error("Error loading image:", error));


        // 버튼 클릭 이벤트 리스너 추가
        document.querySelector(".show_recode").addEventListener("click", function () {
            const studentId = document.querySelector("#student-info").dataset.studentId;

            // AJAX 요청
            const xhr = new XMLHttpRequest();
            xhr.open("GET", `/api/record/${studentId}`, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        const data = JSON.parse(xhr.responseText);
                        const data1 = data[0];
                        const data2 = data[1];
                        const data3 = data[2];

                        // HTML 업데이트
                        document.querySelector("#show_counsel1_sub").innerHTML = data1;
                        document.querySelector("#show_counsel2_sub").innerHTML = data2;
                        document.querySelector("#show_counsel3_sub").innerHTML = data3;


                        // div 보이기
                        document.querySelector("#show_counsel1_sub").style.display = 'block';
                        document.querySelector("#show_counsel2_sub").style.display = 'block';
                        document.querySelector("#show_counsel3_sub").style.display = 'block';
                        document.querySelector("#show_counsel4_sub").style.display = 'none';
                    } else {
                        alert("생활기록부 데이터를 불러오는데 실패했습니다.");
                    }
                }
            };
            xhr.send();
        });
    });



    // Div 보이기/숨기기 함수
    function toggleDiv(divId) {
        const allDivs = ['file_drag', 'counsel_div'];
        const allButtons = ['file_drag_button', 'show_counsel_button'];

        // Div visibility toggle
        allDivs.forEach(id => {
            const div = document.getElementById(id);
            const rn = document.getElementById('recode_name');
            const rn1 = document.getElementById('recode_name1');
            if (id === divId) {
                if(id==='counsel_div')
                {
                   rn.style.display = 'block';
                   rn1.style.display = 'block';
                }
                div.style.display = 'block'; // 클릭한 div만 보이게

            } else {
                if(id==='counsel_div')
                {
                    rn.style.display = 'none';
                    rn1.style.display = 'none';
                }
                div.style.display = 'none'; // 나머지 div는 숨김
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const fileButton = document.getElementById('file_drag_button');
        const showButton = document.getElementById('show_counsel_button');

        function disableSideBox() {
            const sideBox = document.querySelector(".side-box");
            const buttons = sideBox.querySelectorAll("button");
            // 'side-box' 안에 있는 모든 버튼을 비활성화
            buttons.forEach(button => {
                button.disabled = true;
            });
            // 스타일로 비활성화된 느낌을 주기 위해 변경
            sideBox.style.pointerEvents = 'none';  // 마우스 이벤트를 막음
            sideBox.style.opacity = '0.5';  // 흐리게 보이게 함
        }

        function ableSideBox() {
            const sideBox = document.querySelector(".side-box");
            const buttons = sideBox.querySelectorAll("button");
            // 'side-box' 안에 있는 모든 버튼을 활성화
            buttons.forEach(button => {
                button.disabled = false;
            });
            // 스타일 초기화
            sideBox.style.pointerEvents = 'auto';  // 마우스 이벤트가 다시 작동하도록 함
            sideBox.style.opacity = '1';  // 흐리게 보이는 효과를 없앰
        }

        // 파일 버튼 클릭 시
        fileButton.addEventListener('click', function () {
            fileButton.style.backgroundColor = '#E1B86A';  // 클릭 시 색
            showButton.style.backgroundColor = '#7E5200';  // 다른 버튼 원래 색으로
            fileButton.style.borderColor = '#E1B86A';
            showButton.style.borderColor = '#7E5200';
            disableSideBox();

        });

        // 상담 버튼 클릭 시
        showButton.addEventListener('click', function () {
            fileButton.style.backgroundColor = '#7E5200';  // 클릭 시 색
            showButton.style.backgroundColor = '#E1B86A';  // 다른 버튼 원래 색으로
            fileButton.style.borderColor = '#7E5200';
            showButton.style.borderColor = '#E1B86A';
            ableSideBox();
        });
    });

    // 페이지 로딩 시 file_drag를 기본적으로 보이게 설정
    window.onload = function() {
        toggleDiv('file_drag');
        function disableSideBox() {
            const sideBox = document.querySelector(".side-box");
            const buttons = sideBox.querySelectorAll("button");
            // 'side-box' 안에 있는 모든 버튼을 비활성화
            buttons.forEach(button => {
                button.disabled = true;
            });
            // 스타일로 비활성화된 느낌을 주기 위해 변경
            sideBox.style.pointerEvents = 'none';  // 마우스 이벤트를 막음
            sideBox.style.opacity = '0.5';  // 흐리게 보이게 함
        }
        disableSideBox();
    };

    document.addEventListener('DOMContentLoaded', function() {                //로그인 데이터 위아래로 위치하기
        const studentElement = document.querySelectorAll('.student-div');

        function updatePositions() {
            const windowHeight = window.innerHeight;  // 화면 높이 가져오기

            studentElement.forEach((element, index) => {
                // 화면 높이를 기준으로 비례적인 값을 계산 (40px 기준으로)
                const topValue = (index * 0.17) * windowHeight;  // 5%씩 증가하도록 계산 (조정 가능)

                element.style.top = `${topValue}px`;
                element.style.position = 'absolute';  // position을 절대값으로 설정
            });


        }

        // 처음 로드 시와 화면 크기가 변경될 때마다 업데이트
        updatePositions();

        window.addEventListener('resize', function() {
            updatePositions();  // 화면 크기 조정 시 위치 업데이트
        });
    });




    document.getElementById('uploadButton1').addEventListener('click', function() {
        document.getElementById('fileInput').click();
    });


    // 파일 선택 후 처리
    document.getElementById('fileInput').addEventListener('change', function(event) {
        const file = event.target.files[0]; // 한 개의 파일만 가져옴
        if (!file) return;

        if (file.type !== "application/pdf") {
            alert("PDF 파일만 업로드 가능합니다.");
            return;
        }

        const fileList = document.getElementById("fileList");
        const fileListHeader = document.querySelector(".file_list_header");
        const fileSizeDisplay = document.getElementById("fileSize");

        // 기존 파일 제거 후 새 파일 추가
        fileList.innerHTML = "";
        fileListHeader.style.display = "flex";

        const li = document.createElement("li");
        li.textContent = file.name + ` (${(file.size / 1024).toFixed(2)} KB)`;
        fileList.appendChild(li);

        fileSizeDisplay.textContent = (file.size / 1024).toFixed(2) + " KB";
    });

    document.getElementById("send").addEventListener("click", function () {
        const fileInput = document.getElementById("fileInput");
        if (!fileInput.files.length) {
            alert("업로드할 파일을 선택해주세요.");
            return;
        }

        const studentId = document.getElementById("student-info").dataset.studentId; // 학생 ID 가져오기
        if (!studentId) {
            alert("학생 ID를 찾을 수 없습니다.");
            return;
        }

        const file = fileInput.files[0]; // 첫 번째 파일 가져오기
        const formData = new FormData();
        formData.append("file", file); // 파일 추가
        formData.append("studentId", studentId); // 학생 ID 추가

        fetch("/upload", {
            method: "POST",
            body: formData,
        })
                .then(response => response.json()) // JSON 형식의 응답 받기
                .then(data => {
                    alert("파일 업로드 성공: " + data.message);
                })
                .catch(error => {
                    console.error("파일 업로드 실패:", error);
                    alert("파일 업로드에 실패했습니다.");
                });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const fileDrag = document.getElementById("file_drag");
        const fileList = document.getElementById("fileList");
        const fileSizeDisplay = document.getElementById("fileSize");
        const removeAllButton = document.getElementById("removeAll_button");
        const fileListHeader = document.querySelector(".file_list_header");
        const fileInput = document.getElementById("fileInput");

        // 드래그 오버 이벤트
        fileDrag.addEventListener("dragover", function (event) {
            event.preventDefault(); // 기본 동작을 막아야 드롭 가능
            fileDrag.classList.add("dragover"); // 드래그 오버 상태로 변경
        });

        // 드래그 아웃 이벤트
        fileDrag.addEventListener("dragleave", function () {
            fileDrag.classList.remove("dragover"); // 드래그 아웃 시 스타일 초기화
        });

        // 파일 드롭 이벤트
        fileDrag.addEventListener("drop", function (event) {
            event.preventDefault(); // 기본 동작을 막아야 드롭 가능
            fileDrag.classList.remove("dragover"); // 드래그 오버 스타일 초기화

            const file = event.dataTransfer.files[0]; // 첫 번째 파일만 처리
            if (!file) return;

            if (file.type !== "application/pdf") {
                alert("PDF 파일만 업로드 가능합니다.");
                return;
            }

            // 파일을 input에 추가하고, 파일 목록 업데이트
            fileInput.files = event.dataTransfer.files;

            // 기존 파일 목록 지우기
            fileList.innerHTML = "";
            fileListHeader.style.display = "flex"; // 파일 목록 헤더 보이기

            const li = document.createElement("li");
            li.textContent = file.name + ` (${(file.size / 1024).toFixed(2)} KB)`;
            fileList.appendChild(li);

            fileSizeDisplay.textContent = (file.size / 1024).toFixed(2) + " KB";
        });

        // "전체 삭제" 버튼 클릭 이벤트
        removeAllButton.addEventListener("click", function () {
            fileList.innerHTML = ""; // 파일 목록 비우기
            fileSizeDisplay.textContent = "0 KB"; // 파일 크기 초기화
            fileListHeader.style.display = "none"; // 파일 목록 헤더 숨기기
        });
    });
</script>

{{>footer}}